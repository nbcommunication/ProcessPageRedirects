<?php namespace ProcessWire;

/**
 * Process Page Redirects
 *
 * #pw-summary Lists site redirects.
 *
 * @copyright 2023 NB Communication Ltd
 *
 */

class ProcessPageRedirects extends Process {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return [
			'title' => 'Process Page Redirects',
			'summary' => 'Lists site redirects.',
			'version' => 201,
			'author' => 'Chris Thomson (NB Communication)',
			'icon' => 'share',
			'permission' => 'page-edit-redirects',
			'requires' => 'ProcessWire>=3.0.225,PHP>=8.1',
			'page' => [
				'parent' => 'page',
				'name' => 'redirects',
				'title' => 'Redirects',
			],
		];
	}

	/**
	 * Initialize the module
	 *
	 */
	public function init() {
		parent::init();
	}

	/**
	 * List the pages
	 *
	 * @return string
	 * @throws WireException
	 *
	 */
	public function execute() {

		$config = $this->wire()->config;
		$database = $this->wire()->database;
		$modules = $this->wire()->modules;
		$pages = $this->wire()->pages;

		$modules->get('JqueryWireTabs');
		$id = $this->className;
		$hasLanguagePageNames = $modules->isInstalled('LanguageSupportPageNames');

		$this->headline($this->_('Page Redirects'));

		// Headers
		$defaultHeaders = [
			$this->_('Redirect Path'),
			$this->_('Destination'),
		];

		$_test = function($url) {
			$label = $this->_('Test this redirect');
			return "<a href=$url target=_blank title='$label'>$url</a>";
		};

		$tabs = $this->wire(new InputfieldForm());
		$tabs->attr('id', $id);

		foreach([
			'site' => $this->_('Site'),
			'htaccess' => $this->_('htaccess'),
		] as $key => $type) {

			$headers = $defaultHeaders;
			$rows = [];
			switch($key) {
				case 'site':

					if($modules->isInstalled('PagePathHistory')) {

						if($hasLanguagePageNames) {
							$headers[] = $this->_('Language');
						}

						$headers[] = $this->_('Created');

						$query = $database->query("SELECT * FROM `page_path_history` ORDER BY `created` DESC");
						foreach($query->fetchAll(\PDO::FETCH_ASSOC) as $row) {

							$page = $pages->get($row['pages_id']);
							if(!$page->id || !$page->viewable()) continue;
							$label = $this->_('Edit this page');

							$tr = [
								$_test($row['path']),
								"<a href=$page->editURL#ProcessPageEditSettings target=_blank title='$label'>$page->url</a>",
							];

							if($hasLanguagePageNames) {
								$tr[] = $this->wire()->languages->get($row['language_id'])->title;
							}

							$ts = $row['created'];
							$dt = strtotime($ts);
							$tr[] = "<span hidden>{$dt}</span><span data-uk-tooltip='title:{$ts}'>{$this->wire()->datetime->relativeTimeStr($row['created'])}</span>";

							$rows[] = $tr;
						}
					}

					break;
				case 'htaccess':

					$htaccess = file_get_contents($config->paths->root . '.htaccess');
					if(strpos($htaccess, 'RewriteRule') !== false) {

						$headers[] = $this->_('Type');
						$https = $config->https ? 'https' : 'http';

						if(preg_match_all('/RewriteRule\s(.*?)\s(.*?)\s\[.*?R=(\d{3})\]/', $htaccess, $matches)) {

							foreach($matches[0] as $index => $match) {

								$path = rtrim(ltrim($matches[1][$index], '^'), '$');
								if(substr($path, 0, 1) !== '/') {
									$path = "/$path";
								}

								$url = $matches[2][$index];
								// We only want rules that redirect to a httpHost url
								$hasHttpHost = false;
								foreach($config->httpHosts as $httpHost) {
									if(strpos($url, $httpHost) !== false) {
										$hasHttpHost = true;
									}
								}
								if(!$hasHttpHost) continue;

								$rows[] = [
									$_test($path),
									str_replace(array_map(function($httpHost) use ($https) {
										return "$https://$httpHost";
									}, $config->httpHosts), '', $url),
									$matches[3][$index],
								];
							}
						}
					}

					break;
			}

			$c = count($rows);

			$out = '';
			if($c) {

				$table = $modules->get('MarkupAdminDataTable');
				$table->setEncodeEntities(false);
				$table->headerRow($headers);
				foreach($rows as $row) {
					$table->row($row);
				}
				$out .= $table->render();

			} else {

				$out .= $this->_('There are no redirects to display.');
			}

			$tab = $this->wire(new InputfieldWrapper());
			$tab->attr('title', "$type ($c)");
			$tab->attr('name+id', "{$id}_{$type}");
			$tab->attr('class', 'WireTab');

			$tab->add([
				'type' => 'text',
				'name' => "{$id}_{$type}_filter",
				'label' => $this->_('Filter Redirects'),
				'placeholder' => $this->_('Start typing to filter the redirects'),
				'class' => "$id-filter",
			]);

			$tab->add([
				'type' => 'markup',
				'name' => "{$id}_{$type}_contents",
				'value' => $out,
			]);

			$tabs->add($tab);
		}

		return $tabs->render();
	}

	/**
	 * Install ProcessPageRedirects
	 *
	 */
	public function ___install() {
		parent::___install();
	}

	/**
	 * Uninstall ProcessPageRedirects
	 *
	 */
	public function ___uninstall() {
		parent::___uninstall();
	}
}
